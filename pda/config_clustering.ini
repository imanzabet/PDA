[default]
num_class = 2
# The class inputs, should be defined according to sequence of class labels
class_labels =  poison
                clean

#[clustering]
## clustering settings
#algorithm=KMeans

[KMeans]
# int, optional, default: 8
n_clusters = 2
# {‘k-means++’, ‘random’ or an ndarray} defaults to ‘k-means++’
init = k-means++
# number of running algo with rand centroids, int, default: 10
n_init = 30
# int default: 300
max_iter = 300
# tolerance, float, default: 1e-4
tol = 0.0001
# {‘auto’, True, False}
precompute_distances = auto
# int, RandomState instance or None(default)
random_state = 22
# "auto", "full" or "elkan", default ="auto"
algorithm = auto

[DBSCAN]
# default=0.5
eps = 0.5
# algorithm: {'auto', 'ball_tree', 'kd_tree', 'brute'}, default='auto'
algorithm = auto
min_samples = 100
# default = 30
leaf_size = 30

[AgglomerativeClustering]
# int or None, optional (default=2)
n_clusters = 2
# "euclidean", "l1", "l2", "manhattan", "cosine", or "precomputed", default: "euclidean"
affinity = euclidean
# {"ward", "complete", "average", "single"}, optional (default="ward")
linkage = ward


# Previous structure in the code
;    clustering_hyparam = dict(
;    KMeans=dict(
;        n_clusters=2,    # int, optional, default: 8
;        init='k-means++',# {‘k-means++’, ‘random’ or an ndarray} defaults to ‘k-means++’
;        n_init=30,       # number of running algo with rand centroids, int, default: 10
;        max_iter=300,    # int default: 300
;        tol=0.0001,      # tolerance, float, default: 1e-4
;        precompute_distances='auto',         # {‘auto’, True, False}
;        random_state=22,  # int, RandomState instance or None(default)
;        algorithm='auto' # "auto", "full" or "elkan", default ="auto"
;    ),
;    DBSCAN=dict(
;        eps=0.5,          # default=0.5
;        algorithm='auto', # algorithm: {'auto', 'ball_tree', 'kd_tree', 'brute'}, default='auto'
;        min_samples=100,
;        leaf_size=30     # default = 30
;    ),
;    AgglomerativeClustering=dict(
;        n_clusters=2,        # int or None, optional (default=2)
;        affinity='euclidean',# "euclidean", "l1", "l2", "manhattan", "cosine", or "precomputed", default: "euclidean"
;        linkage='ward'       # {"ward", "complete", "average", "single"}, optional (default="ward")
;    )
;    )